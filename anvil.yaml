dependencies: []
services: []
startup: {type: module, module: augment}
package_name: AnvilAugment
allow_embedding: false
name: AnvilAugment
runtime_options: {version: 2, server_version: python2-sandbox, client_version: '3'}
metadata: {}
startup_form: null
native_deps: {head_html: "<script>\nfunction get_jQuery_obj(component) {\n    // deal\
    \ with buttons being the surrounding div rather than the button element\n    if\
    \ (component.v._anvil.element[0].classList.contains(\"anvil-button\")) {\n   \
    \     return $(component.v._anvil.element[0].firstElementChild)\n        // jQuery\
    \ object\n    } else {\n        return component.v._anvil.element\n    };  //\
    \ jQuery object\n};\n\nfunction augment(component, event) {\n    const element\
    \ = get_jQuery_obj(component);\n    component = component.v;\n    component._anvil.eventTypes[event]\
    \ = {\n        'name': event\n    };\n    // hover is different\n    const event_type\
    \ = event == 'hover' ? 'mouseenter mouseleave' : event;\n\t\n  \t// set the event\
    \ for the jquery element\n    element.on(event_type, function (e) {\n        let\
    \ e_args = {};\n        if (event_type.includes('key')) {\n            e_args\
    \ = {key:       e.key,       key_code: e.keyCode,\n                      shift_key:\
    \ e.shiftKey,  alt_key:  e.altKey,\n                      meta_key:  e.metaKey,\
    \   ctrl_key: e.ctrlKey,\n            };\n        }\n        e_args.event_type\
    \ = e.type;\n\n      \t// call raise_event on the component\n        let handled\
    \ = PyDefUtils.raiseEventOrSuspend(e_args, component, event);\n\n      \tif (handled.$isSuspension)\
    \ {\n          PyDefUtils.asyncToPromise(function() { return handled; });\n  \
    \      } else if (handled !== undefined && handled.v) {\n          e.preventDefault;\n\
    \        }\n\n    });\n\t\n  \t// add trigger method to component\n    component.constructor.trigger\
    \ = new Sk.builtin.func(function (self, event) {\n        event = event.$jsstr();\n\
    \        event = event == 'hover' ? 'mouseenter mouseleave' : event; // would\
    \ probably never do this!\n        element.trigger(event);\n    });\n}\n</script>"}
db_schema: []
renamed: true
